/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,11,21,23,28,40,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$V1=[1,7],$V2=[6,11,15,21,23,28,40,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$V3=[6,11,15,21,28,40,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$V4=[2,17],$V5=[1,10],$V6=[2,9],$V7=[1,12],$V8=[6,11,15,21,40,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$V9=[2,22],$Va=[1,15],$Vb=[8,179],$Vc=[1,18],$Vd=[2,27],$Ve=[1,56],$Vf=[1,32],$Vg=[1,61],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,36],$Vl=[1,37],$Vm=[1,38],$Vn=[1,39],$Vo=[1,40],$Vp=[1,41],$Vq=[1,48],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,52],$Vv=[1,53],$Vw=[1,47],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,62],$VC=[1,69],$VD=[6,15,40,42,48,124,126,127],$VE=[6,11,21,40,42,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$VF=[1,84],$VG=[1,83],$VH=[11,51,53,57],$VI=[53,57],$VJ=[40,48,60],$VK=[2,152],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[11,40,48,60,61,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$VP=[11,15,40,48,60,124,126,127,139,140],$VQ=[11,15,40,48,60,61,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$VR=[15,40,48,60,124,126,127,139,140],$VS=[11,15,40,48,60,61,124,126,127,130,131,132,133,134,135,139,140,141,143,146,147,148,149,150,151,154],$VT=[11,139,140],$VU=[11,15,22,51,53,57],$VV=[6,42],$VW=[6,11,15,21,40,42,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$VX=[11,22,42,140,165],$VY=[1,137],$VZ=[1,133],$V_=[1,134],$V$=[1,138],$V01=[15,40],$V11=[2,66],$V21=[1,142],$V31=[1,154],$V41=[1,153],$V51=[8,11,57,111,124,131,132,133,134,141,153,157,175,178,179,182,185,190,191,192],$V61=[15,40,48,60,124,126,127],$V71=[22,42],$V81=[1,186],$V91=[1,185],$Va1=[1,182],$Vb1=[15,22,40],$Vc1=[15,22,40,48],$Vd1=[22,40,48,54],$Ve1=[40,60],$Vf1=[11,53,57,140,165],$Vg1=[127,140,143,146,147,148,149],$Vh1=[1,235],$Vi1=[1,236],$Vj1=[1,245],$Vk1=[1,250],$Vl1=[1,243],$Vm1=[1,260],$Vn1=[1,254],$Vo1=[1,255],$Vp1=[1,257],$Vq1=[1,256],$Vr1=[1,258],$Vs1=[1,264],$Vt1=[1,261],$Vu1=[1,244],$Vv1=[1,248],$Vw1=[1,251],$Vx1=[1,263],$Vy1=[1,262],$Vz1=[11,22,42,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,140,165,170],$VA1=[11,22,42,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,140,165,168,170],$VB1=[15,61],$VC1=[2,53],$VD1=[1,281],$VE1=[11,22,42,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,140,165],$VF1=[42,95,96,97,98,99,100],$VG1=[40,54,60,118],$VH1=[2,122],$VI1=[8,11,15],$VJ1=[60,124,157],$VK1=[8,11,15,22,40,42,48,57,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,111,112,124,131,132,133,134,140,141,153,157,161,165,168,170,173,175,178,179,182,185,190,191,192],$VL1=[8,11,22,42,48,57,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,111,124,131,132,133,134,140,141,153,157,165,168,170,173,175,178,179,182,185,190,191,192],$VM1=[8,11,15,22,42,48,57,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,111,124,131,132,133,134,140,141,153,157,165,168,170,173,175,178,179,182,185,190,191,192],$VN1=[57,124,153,157,182,185,190,191,192],$VO1=[8,11,15,22,40,42,48,57,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,111,112,124,131,132,133,134,140,141,153,157,165,168,170,173,175,178,179,182,185,190,191,192],$VP1=[11,22,42,60,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,140,165],$VQ1=[11,40,42,43,48,61,64,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$VR1=[1,350],$VS1=[2,68],$VT1=[1,352],$VU1=[1,353],$VV1=[1,354],$VW1=[1,355],$VX1=[1,356],$VY1=[1,357],$VZ1=[1,358],$V_1=[1,359],$V$1=[1,360],$V02=[1,361],$V12=[1,362],$V22=[1,363],$V32=[1,364],$V42=[1,365],$V52=[1,366],$V62=[1,367],$V72=[2,95],$V82=[1,371],$V92=[1,372],$Va2=[1,373],$Vb2=[1,374],$Vc2=[1,375],$Vd2=[1,376],$Ve2=[42,110,111,124,157,190,191,192],$Vf2=[15,40,42,48,124,126,127],$Vg2=[190,191],$Vh2=[1,401],$Vi2=[8,11,22,42,57,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,111,124,131,132,133,134,140,141,153,157,165,168,170,175,178,179,182,185,190,191,192],$Vj2=[2,40],$Vk2=[15,60,63],$Vl2=[2,106],$Vm2=[1,432],$Vn2=[1,433],$Vo2=[15,143],$Vp2=[1,446],$Vq2=[1,447],$Vr2=[60,124,140,157,173],$Vs2=[15,60,124,140,157,173],$Vt2=[15,40,48],$Vu2=[1,478],$Vv2=[1,479],$Vw2=[11,15,40,42,43,48,61,64,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$Vx2=[15,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"file":3,"scc":4,"stylesheet":5,"EOF":6,"string":7,"STRING":8,"string_or_ident":9,"identifier":10,"IDENT":11,"string_or_uri":12,"uri":13,"junk":14,"S":15,"HTML_COMMENT":16,"charset_block":17,"import_list":18,"namespace_list":19,"blocks":20,"BLOCK_CHARSET":21,";":22,"BLOCK_IMPORT":23,"import_block":24,"optional_medium_list":25,"medium_list":26,"namespace_block":27,"BLOCK_NAMESPACE":28,"block":29,"ruleset":30,"media_block":31,"page_block":32,"font_face_block":33,"font_feature_values_block":34,"keyframes_block":35,"viewport_block":36,"supports_block":37,"counter_styles_block":38,"block_of_declarations":39,"{":40,"declaration_list":41,"}":42,"BLOCK_MEDIA":43,"media_inner_list":44,"media_inner":45,"media_query":46,"medium_list_extended":47,",":48,"media_query_type":49,"media_query_expr":50,"ONLY":51,"optional_media_query_expression":52,"NOT":53,"AND":54,"media_expr":55,"media_query_expr_and":56,"(":57,"media_expr_value":58,"media_expr_slashzero":59,")":60,":":61,"expr":62,"SLASH_ZERO":63,"BLOCK_PAGE":64,"page_name":65,"page_declaration_list":66,"page_name_optional_pseudo":67,"page_declaration":68,"declaration":69,"page_margin_declaration":70,"page_margin":71,"PAGE_TOP_LEFT_CORNER":72,"PAGE_TOP_LEFT":73,"PAGE_TOP_CENTER":74,"PAGE_TOP_RIGHT":75,"PAGE_TOP_RIGHT_CORNER":76,"PAGE_BOTTOM_LEFT_CORNER":77,"PAGE_BOTTOM_LEFT":78,"PAGE_BOTTOM_CENTER":79,"PAGE_BOTTOM_RIGHT":80,"PAGE_BOTTOM_RIGHT_CORNER":81,"PAGE_LEFT_TOP":82,"PAGE_LEFT_MIDDLE":83,"PAGE_LEFT_BOTTOM":84,"PAGE_RIGHT_TOP":85,"PAGE_RIGHT_MIDDLE":86,"PAGE_RIGHT_BOTTOM":87,"BLOCK_FONT_FACE":88,"BLOCK_FONT_FEATURE_VALUES":89,"font_feature_name":90,"font_feature_values_contents":91,"font_feature_name_extended":92,"font_feature_values_inner_block":93,"font_feature_values_content_block":94,"FFV_SWASH":95,"FFV_ANNOTATION":96,"FFV_ORNAMENTS":97,"FFV_STYLISTIC":98,"FFV_STYLESET":99,"FFV_CHARACTER_VARIANT":100,"BLOCK_KEYFRAMES":101,"keyframe_list":102,"BLOCK_VENDOR_KEYFRAMES":103,"keyframe":104,"keyframe_selector_list":105,"keyframe_selector":106,"keyframe_selector_list_extended":107,"num":108,"optional_percent":109,"FROM":110,"TO":111,"%":112,"BLOCK_VIEWPORT":113,"BLOCK_VENDOR_VIEWPORT":114,"BLOCK_SUPPORTS":115,"supports_list":116,"supports_item":117,"OR":118,"supports_negation_base":119,"supports_negation":120,"BLOCK_COUNTERSTYLE":121,"selector_list":122,"selector_chunk_list":123,"+":124,"simple_selector":125,"SEL_CHILD":126,"SEL_SIBLING":127,"element_name":128,"simple_selector_part_list":129,"ID_IDENT":130,"HEX_SHORT":131,"HEX_LONG":132,"HEX_SHORT_ALPHA":133,"HEX_LONG_ALPHA":134,"CLASS_IDENT":135,"attribute_selector":136,"pseudo_selector":137,"element_type":138,"|":139,"*":140,"[":141,"attribute_selector_body":142,"]":143,"attribute_selector_body_name":144,"attribute_selector_body_operator":145,"=":146,"|=":147,"^":148,"$":149,"::":150,"NTH_FUNC":151,"nth":152,"FUNCTION_IDENT":153,"PSEUDO_CLASS":154,"n_val":155,"integer":156,"-":157,"ODD":158,"EVEN":159,"signed_integer":160,"N":161,"declaration_body":162,"optional_important":163,"optional_slash_nine":164,"IE_FILTER":165,"declaration_head":166,"declaration_name":167,"!":168,"IMPORTANT":169,"SLASH_NINE":170,"term":171,"expr_chain":172,"/":173,"unit":174,"UNICODE_RANGE":175,"hexcolor":176,"custom_ident":177,"IE_EXPRESSION":178,"URL_FULL":179,"unit_dim":180,"math_expr":181,"CALC":182,"attr_expression":183,"function":184,"ATTR":185,"attr_expression_unit":186,"attr_expression_fallback":187,"math_product":188,"custom_ident_chain":189,"INTEGER":190,"SCINOT":191,"FLOAT":192,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"STRING",11:"IDENT",15:"S",16:"HTML_COMMENT",21:"BLOCK_CHARSET",22:";",23:"BLOCK_IMPORT",28:"BLOCK_NAMESPACE",40:"{",42:"}",43:"BLOCK_MEDIA",48:",",51:"ONLY",53:"NOT",54:"AND",57:"(",60:")",61:":",63:"SLASH_ZERO",64:"BLOCK_PAGE",72:"PAGE_TOP_LEFT_CORNER",73:"PAGE_TOP_LEFT",74:"PAGE_TOP_CENTER",75:"PAGE_TOP_RIGHT",76:"PAGE_TOP_RIGHT_CORNER",77:"PAGE_BOTTOM_LEFT_CORNER",78:"PAGE_BOTTOM_LEFT",79:"PAGE_BOTTOM_CENTER",80:"PAGE_BOTTOM_RIGHT",81:"PAGE_BOTTOM_RIGHT_CORNER",82:"PAGE_LEFT_TOP",83:"PAGE_LEFT_MIDDLE",84:"PAGE_LEFT_BOTTOM",85:"PAGE_RIGHT_TOP",86:"PAGE_RIGHT_MIDDLE",87:"PAGE_RIGHT_BOTTOM",88:"BLOCK_FONT_FACE",89:"BLOCK_FONT_FEATURE_VALUES",95:"FFV_SWASH",96:"FFV_ANNOTATION",97:"FFV_ORNAMENTS",98:"FFV_STYLISTIC",99:"FFV_STYLESET",100:"FFV_CHARACTER_VARIANT",101:"BLOCK_KEYFRAMES",103:"BLOCK_VENDOR_KEYFRAMES",110:"FROM",111:"TO",112:"%",113:"BLOCK_VIEWPORT",114:"BLOCK_VENDOR_VIEWPORT",115:"BLOCK_SUPPORTS",118:"OR",121:"BLOCK_COUNTERSTYLE",124:"+",126:"SEL_CHILD",127:"SEL_SIBLING",130:"ID_IDENT",131:"HEX_SHORT",132:"HEX_LONG",133:"HEX_SHORT_ALPHA",134:"HEX_LONG_ALPHA",135:"CLASS_IDENT",139:"|",140:"*",141:"[",143:"]",146:"=",147:"|=",148:"^",149:"$",150:"::",151:"NTH_FUNC",153:"FUNCTION_IDENT",154:"PSEUDO_CLASS",157:"-",158:"ODD",159:"EVEN",161:"N",165:"IE_FILTER",168:"!",169:"IMPORTANT",170:"SLASH_NINE",173:"/",175:"UNICODE_RANGE",178:"IE_EXPRESSION",179:"URL_FULL",182:"CALC",185:"ATTR",190:"INTEGER",191:"SCINOT",192:"FLOAT"},
productions_: [0,[3,3],[7,1],[9,1],[9,1],[10,1],[12,1],[12,1],[14,1],[14,0],[4,0],[4,1],[4,1],[5,4],[17,6],[17,0],[18,6],[18,0],[24,3],[25,2],[25,0],[19,4],[19,0],[27,4],[27,6],[20,2],[20,2],[20,0],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[39,4],[31,8],[44,2],[44,0],[45,2],[45,2],[45,2],[26,2],[47,3],[47,0],[46,1],[46,1],[49,5],[49,5],[49,3],[52,3],[52,0],[50,2],[56,3],[56,0],[55,9],[58,3],[58,0],[59,2],[59,0],[32,7],[65,3],[65,2],[67,2],[67,0],[66,2],[66,0],[68,1],[68,1],[68,2],[70,4],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[33,3],[34,7],[90,3],[92,1],[92,0],[91,2],[91,0],[93,4],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[35,8],[35,8],[102,2],[102,0],[104,3],[105,3],[107,3],[107,0],[106,2],[106,1],[106,1],[109,1],[109,0],[36,3],[36,3],[37,7],[116,4],[116,4],[116,1],[117,2],[117,5],[117,5],[120,3],[120,3],[120,4],[119,4],[38,5],[30,2],[122,4],[122,1],[123,5],[123,5],[123,5],[123,3],[123,2],[125,2],[125,1],[129,2],[129,2],[129,3],[129,2],[129,3],[129,2],[129,3],[129,2],[129,3],[129,2],[129,2],[129,2],[129,0],[128,3],[128,1],[128,2],[138,1],[138,1],[136,4],[142,1],[142,5],[144,2],[145,1],[145,2],[145,1],[145,2],[145,2],[145,2],[137,2],[137,5],[137,6],[137,5],[137,1],[137,2],[152,5],[152,5],[152,1],[152,2],[152,2],[152,2],[155,3],[155,2],[41,4],[41,3],[41,1],[41,0],[69,3],[162,2],[162,2],[162,1],[166,4],[167,2],[167,1],[163,4],[163,0],[164,2],[164,2],[164,0],[62,3],[172,5],[172,5],[172,3],[172,0],[171,1],[171,1],[171,1],[171,1],[171,1],[171,1],[171,1],[171,1],[171,1],[13,1],[174,2],[174,4],[174,5],[174,1],[174,1],[184,4],[184,3],[180,1],[180,1],[180,0],[183,7],[186,4],[186,4],[186,0],[187,3],[187,0],[181,5],[181,5],[181,2],[188,5],[188,5],[188,1],[176,1],[176,1],[176,1],[176,1],[177,4],[189,3],[189,2],[160,2],[160,2],[160,1],[156,1],[156,1],[108,1],[108,2],[108,2],[108,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = new yy.String($$[$0]); 
break;
case 3: case 4: case 6: case 7: case 26: case 45: case 47: case 52: case 55: case 58: case 69: case 70: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 97: case 98: case 99: case 100: case 101: case 102: case 109: case 121: case 132: case 156: case 157: case 162: case 164: case 176: case 192: case 203: case 204: case 205: case 206: case 207: case 208: case 209: case 210: case 211: case 216: case 217: case 220: case 234: case 242: case 244: case 247:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = new yy.Identifier($$[$0]); 
break;
case 8: case 9: case 10: case 11: case 12: case 15: case 53: case 59: case 71: case 128: case 222: case 226:
 this.$ = null; 
break;
case 13:
 this.$ = new yy.Stylesheet($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 14:
 this.$ = new yy.Charset($$[$0-3]); this.$.range = this._$; 
break;
case 16: case 21:
 this.$ = $$[$0]; this.$.unshift($$[$0-3]); 
break;
case 17: case 20: case 22: case 27: case 40: case 46: case 56: case 68: case 95: case 106: case 110: case 152: case 185: case 202: case 228:
 this.$ = []; 
break;
case 18:
 this.$ = new yy.Import($$[$0-2], $$[$0]); this.$.range = this._$; 
break;
case 19: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 41: case 42: case 43: case 64: case 137: case 161: case 214: case 231:
 this.$ = $$[$0-1]; 
break;
case 23:
 this.$ = new yy.Namespace($$[$0-1], null); this.$.range = this._$; 
break;
case 24:
 this.$ = new yy.Namespace($$[$0-1], $$[$0-3]); this.$.range = this._$; 
break;
case 25:
 this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 38:
 this.$ = new yy.Media($$[$0-5], $$[$0-1]); this.$.range = this._$; 
break;
case 39: case 44: case 54: case 94: case 105: case 150: case 151:
 this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 48:
 this.$ = new yy.MediaQuery(null, null, $$[$0]); this.$.range = this._$; 
break;
case 49:
 this.$ = new yy.MediaQuery($$[$0-2], 'only', $$[$0]); this.$.range = this._$; 
break;
case 50:
 this.$ = new yy.MediaQuery($$[$0-2], 'not', $$[$0]); this.$.range = this._$; 
break;
case 51:
 this.$ = new yy.MediaQuery($$[$0-2], null, $$[$0]); this.$.range = this._$; 
break;
case 57:
 this.$ = new yy.MediaExpression($$[$0-6], $$[$0-4], $$[$0-2]); this.$.range = this._$; 
break;
case 60: case 196:
 this.$ = {slashZero: true}; 
break;
case 61: case 194: case 197:
 this.$ = {}; 
break;
case 62:
 this.$ = new yy.Page(new yy.Identifier($$[$0-4]), $$[$0-1]); this.$.range = this._$; 
break;
case 63:
 this.$ = $$[$0-2] + $$[$0-1]; 
break;
case 65:
 this.$ = ':' + $$[$0]; 
break;
case 66: case 93:
 this.$ = ''; 
break;
case 67:
 this.$ = $$[$0]; if ($$[$0-1] !== null) {this.$.unshift($$[$0-1]);} 
break;
case 72:
 this.$ = new yy.PageMargin($$[$0-3].substr(1), $$[$0-1]); 
break;
case 89:
 this.$ = new yy.FontFace($$[$0]); this.$.range = this._$; 
break;
case 90:
 this.$ = new yy.FontFeatureValues(new yy.Identifier($$[$0-4]), $$[$0-1]); this.$.range = this._$; 
break;
case 91:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 92:
 this.$ = ' ' + $$[$0]; 
break;
case 96:
 this.$ = new yy.FontFeatureValuesBlock($$[$0-3], $$[$0-1]); this.$.range = this._$; 
break;
case 103:
 this.$ = new yy.Keyframes($$[$0-5], $$[$0-1]); this.$.range = this._$; 
break;
case 104:
 this.$ = new yy.Keyframes($$[$0-5], $$[$0-1], $$[$0-7].substring(1, $$[$0-7].length - 9)); this.$.range = this._$; 
break;
case 107:
 this.$ = new yy.Keyframe($$[$0-2], $$[$0-1]); this.$.range = this._$; 
break;
case 108:
 this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 111:

            if ($$[$0]) {
                this.$ = new yy.KeyframeSelector($$[$0-1] + '%');
            } else {
                if ($$[$0-1].asNumber() !== 0) throw new SyntaxError('Invalid keyframe selector: ' + $$[$0-1].toString());
                this.$ = new yy.KeyframeSelector($$[$0-1].toString());
            }
            this.$.range = this._$;
        
break;
case 112:
 this.$ = new yy.KeyframeSelector('from'); this.$.range = this._$; 
break;
case 113:
 this.$ = new yy.KeyframeSelector('to'); this.$.range = this._$; 
break;
case 114:
 this.$ = true; 
break;
case 115:
 this.$ = false; 
break;
case 116:
 this.$ = new yy.Viewport($$[$0]); this.$.range = this._$; 
break;
case 117:
 this.$ = new yy.Viewport($$[$0], $$[$0-2].substring(1, $$[$0-2].length - 8)); this.$.range = this._$; 
break;
case 118:
 this.$ = new yy.Supports($$[$0-4], $$[$0-1]); this.$.range = this._$; 
break;
case 119:
 this.$ = yy.createSupportsConditionList($$[$0-3], 'or', $$[$0]); 
break;
case 120:
 this.$ = yy.createSupportsConditionList($$[$0-3], 'and', $$[$0]); 
break;
case 122:
 this.$ = $$[$0]; this.$.range = this._$; 
break;
case 123:
 this.$ = new yy.SupportsCondition($$[$0-2]); this.$.range = this._$; 
break;
case 124: case 183:
 this.$ = $$[$0-2]; 
break;
case 125: case 126:
 this.$ = new yy.SupportsCondition($$[$0-2]); this.$.range = this._$; this.$.negate(); 
break;
case 127:
 this.$ = new yy.SupportsCondition($$[$0-2]); this.$.negate(); 
break;
case 129:
 this.$ = new yy.CounterStyle($$[$0-2], $$[$0]); this.$.range = this._$; 
break;
case 130:
 this.$ = new yy.Ruleset($$[$0-1], $$[$0]); this.$.range = this._$; 
break;
case 131:
 this.$ = yy.createSelectorList($$[$0-3], $$[$0]); 
break;
case 133:
 this.$ = new yy.AdjacentSelector($$[$0-4], $$[$0-1]); this.$.range = this._$; 
break;
case 134:
 this.$ = new yy.DirectDescendantSelector($$[$0-4], $$[$0-1]); this.$.range = this._$; 
break;
case 135:
 this.$ = new yy.SiblingSelector($$[$0-4], $$[$0-1]); this.$.range = this._$; 
break;
case 136:
 this.$ = new yy.DescendantSelector($$[$0-2], $$[$0-1]); this.$.range = this._$; 
break;
case 138:
 this.$ = new yy.SimpleSelector([$$[$0-1]].concat($$[$0])); this.$.range = this._$; 
break;
case 139:
 this.$ = new yy.SimpleSelector($$[$0]); this.$.range = this._$; 
break;
case 140: case 141: case 143: case 145: case 147:
 this.$ = $$[$0]; this.$.unshift(new yy.IDSelector($$[$0-1].substr(1))); 
break;
case 142: case 144: case 146: case 148:
 this.$ = $$[$0]; this.$.unshift(new yy.IDSelector($$[$0-2].substr(1) + $$[$0-1])); 
break;
case 149:
 this.$ = $$[$0]; this.$.unshift(new yy.ClassSelector($$[$0-1].substr(1))); 
break;
case 153:
 this.$ = new yy.ElementSelector($$[$0-2], $$[$0]); this.$.range = this._$; 
break;
case 154:
 this.$ = new yy.ElementSelector($$[$0], null); this.$.range = this._$; 
break;
case 155:
 this.$ = new yy.ElementSelector(null, $$[$0]); this.$.range = this._$; 
break;
case 158:
 this.$ = $$[$0-1]; this.$.range = this._$; 
break;
case 159:
 this.$ = new yy.AttributeSelector($$[$0], null, null); 
break;
case 160:
 this.$ = new yy.AttributeSelector($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 163:
 this.$ = '*='; 
break;
case 165:
 this.$ = '^='; 
break;
case 166:
 this.$ = '$='; 
break;
case 167:
 this.$ = '~='; 
break;
case 168:
 this.$ = new yy.PseudoElementSelector($$[$0]); this.$.range = this._$; 
break;
case 169:
 this.$ = new yy.NthSelector($$[$0-4].substr(1), $$[$0-1]); this.$.range = this._$; 
break;
case 170:
 this.$ = new yy.NotSelector($$[$0-1]); this.$.range = this._$; 
break;
case 171:
 this.$ = new yy.PseudoSelectorFunction($$[$0-3].substring(0, $$[$0-3].length - 1), $$[$0-1]); this.$.range = this._$; 
break;
case 172:
 this.$ = new yy.PseudoClassSelector($$[$0].substr(1)); this.$.range = this._$; 
break;
case 173:
 this.$ = new yy.PseudoClassSelector($$[$0]); this.$.range = this._$; 
break;
case 174: case 175:
 $$[$0-1].applySign($$[$0-3]); this.$ = new yy.LinearFunction($$[$0-4], $$[$0-1]); this.$.range = this._$; 
break;
case 177:
 this.$ = 'odd'; 
break;
case 178:
 this.$ = 'even'; 
break;
case 179:
 this.$ = new yy.LinearFunction(null, $$[$0-1]); this.$.range = this._$; 
break;
case 180:
 this.$ = new yy.NValue($$[$0-2]); this.$.range = this._$; 
break;
case 181:
 this.$ = new yy.NValue(1); this.$.range = this._$; 
break;
case 182:
 this.$ = $$[$0-3]; this.$.push($$[$0]); 
break;
case 184:
 this.$ = [$$[$0]]; 
break;
case 186:
 this.$ = $$[$0-2]; Object.assign(this.$, $$[$0-1], $$[$0]); 
break;
case 187:
 this.$ = new yy.IEFilter($$[$0-1]); this.$.range = this._$; 
break;
case 188:
 this.$ = new yy.Declaration($$[$0-1], $$[$0]); this.$.range = this._$; 
break;
case 189:
 this.$ = new yy.Declaration($$[$0], null); this.$.range = this._$; 
break;
case 190:
 this.$ = $$[$0-3]; 
break;
case 191:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 193:
 this.$ = {important: true}; 
break;
case 195:
 this.$ = {slashNine: true}; 
break;
case 198:
 this.$ = new yy.Expression([[null, $$[$0-2]]].concat($$[$0])); this.$.range = this._$; 
break;
case 199: case 200:
 this.$ = $$[$0-4]; this.$.push([$$[$0-3], $$[$0-1]]); 
break;
case 201:
 this.$ = $$[$0-2]; this.$.push([null, $$[$0-1]]); 
break;
case 212:
 this.$ = new yy.URI($$[$0].substr(4, $$[$0].length - 5)); this.$.range = this._$; 
break;
case 213:

            if ($$[$0] !== null) {
                this.$ = new yy.Dimension($$[$0-1], $$[$0]); this.$.range = this._$;
            } else {
                this.$ = $$[$0-1];
            }
        
break;
case 215:
 this.$ = new yy.Func($$[$0-4], $$[$0-1], null); this.$.range = this._$; 
break;
case 218:
 this.$ = new yy.Func($$[$0-3].substr(0, $$[$0-3].length - 1), $$[$0-1]); this.$.range = this._$; 
break;
case 219:
 this.$ = new yy.Func($$[$0-2].substr(0, $$[$0-2].length - 1), null); this.$.range = this._$; 
break;
case 221:
 this.$ = '%'; 
break;
case 223:

            this.$ = new yy.Func(
                'attr',
                $$[$0-1]
                    ? new yy.Expression([[null, $$[$0-3]]].concat($$[$0-1]))
                    : $$[$0-3]
            );
        
break;
case 224:
 this.$ = [[null, $$[$0-3]]].concat($$[$0-1]); 
break;
case 225:
 this.$ = [[',', $$[$0-1]]]; 
break;
case 227:
 this.$ = [[',', $$[$0]]]; 
break;
case 229: case 230:
 this.$ = new yy.MathSum($$[$0-4], $$[$0-3], $$[$0-1]); this.$.range = this._$; 
break;
case 232: case 233:
 this.$ = new yy.MathProduct($$[$0-4], $$[$0-2], $$[$0]); this.$.range = this._$; 
break;
case 235: case 236: case 237: case 238:
 this.$ = new yy.HexColor($$[$0]); this.$.range = this._$; 
break;
case 239:
 this.$ = new yy.CustomIdent($$[$0-1]); this.$.range = this._$; 
break;
case 240:
 this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 241:
 this.$ = [$$[$0-1]]; 
break;
case 243:
 this.$ = $$[$0]; this.$.applySign($$[$0-1]); 
break;
case 245: case 250:
 this.$ = new yy.Number($$[$0]); this.$.range = this._$; 
break;
case 246:

            const parts = $$[$0].split('e');
            const base = parseInt(parts[0], 10);
            const exp = /[^\d]/.exec(parts[1][0]) ? parts[1].substr(1) : parts[1];
            const sign = parts[1][0] === '-' ? -1 : 1;
            this.$ = new yy.Number(base * Math.pow(10, sign * parseInt(exp, 10)));
            this.$.range = this._$;
        
break;
case 248: case 249:
 this.$ = new yy.Number($$[$0]); this.$.range = this._$; this.$.applySign($$[$0-1]); 
break;
}
},
table: [o($V0,[2,10],{3:1,4:2,15:[1,3],16:[1,4]}),{1:[3]},o([6,11,15,23,28,40,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],[2,15],{5:5,17:6,21:$V1}),o($V2,[2,11]),o($V2,[2,12]),{6:[1,8]},o($V3,$V4,{18:9,23:$V5}),{8:$V6,14:11,15:$V7},{1:[2,1]},o($V8,$V9,{19:13,27:14,28:$Va}),o($Vb,$V6,{14:16,15:$V7}),{7:17,8:$Vc},o([6,8,11,15,21,22,23,28,40,42,43,48,51,53,54,57,60,61,63,64,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,96,97,98,99,100,101,103,110,111,113,114,115,118,121,124,126,127,130,131,132,133,134,135,139,140,141,143,146,147,148,149,150,151,153,154,157,158,159,161,165,168,169,170,173,175,178,179,182,185,190,191,192],[2,8]),o([6,15,40,48,124,126,127],$Vd,{20:19,29:20,17:21,30:22,31:23,32:24,33:25,34:26,35:27,36:28,37:29,38:30,122:31,123:42,125:43,128:44,129:45,138:46,136:54,137:55,11:$Ve,21:$V1,43:$Vf,61:$Vg,64:$Vh,88:$Vi,89:$Vj,101:$Vk,103:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),{22:[1,63]},o([8,11,179],$V6,{14:64,15:$V7}),{7:67,8:$Vc,12:66,13:68,24:65,179:$VC},{14:70,15:$V7,22:$V6},o([8,11,15,22,42,48,51,53,57,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,111,124,131,132,133,134,140,141,143,153,157,165,168,170,173,175,178,179,182,185,190,191,192],[2,2]),{6:[2,13]},o($VD,$Vd,{29:20,17:21,30:22,31:23,32:24,33:25,34:26,35:27,36:28,37:29,38:30,122:31,123:42,125:43,128:44,129:45,138:46,136:54,137:55,20:71,11:$Ve,21:$V1,43:$Vf,61:$Vg,64:$Vh,88:$Vi,89:$Vj,101:$Vk,103:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VD,$Vd,{29:20,17:21,30:22,31:23,32:24,33:25,34:26,35:27,36:28,37:29,38:30,122:31,123:42,125:43,128:44,129:45,138:46,136:54,137:55,20:72,11:$Ve,21:$V1,43:$Vf,61:$Vg,64:$Vh,88:$Vi,89:$Vj,101:$Vk,103:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VE,$V6,{14:73,15:$V7}),o($VE,$V6,{14:74,15:$V7}),o($VE,$V6,{14:75,15:$V7}),o($VE,$V6,{14:76,15:$V7}),o($VE,$V6,{14:77,15:$V7}),o($VE,$V6,{14:78,15:$V7}),o($VE,$V6,{14:79,15:$V7}),o($VE,$V6,{14:80,15:$V7}),o($VE,$V6,{14:81,15:$V7}),{39:82,40:$VF,48:$VG},o($VH,$V6,{14:85,15:$V7}),o([11,40,61],$V6,{14:86,15:$V7}),{14:87,15:$V7,40:$V6},{11:$V6,14:88,15:$V7},{11:$V6,14:89,15:$V7},{11:$V6,14:90,15:$V7},{14:91,15:$V7,40:$V6},{14:92,15:$V7,40:$V6},o($VI,$V6,{14:93,15:$V7}),{11:$V6,14:94,15:$V7},o($VJ,[2,132],{128:44,129:45,138:46,136:54,137:55,125:98,11:$Ve,15:$VK,61:$Vg,124:$VL,126:$VM,127:$VN,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VO,$V6,{14:99,15:$V7}),o($VP,$VK,{136:54,137:55,129:100,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VQ,[2,139]),o([11,15,40,48,60,61,124,126,127,130,131,132,133,134,135,140,141,143,146,147,148,149,150,151,154],[2,154],{139:[1,101]}),{11:[1,102]},o($VP,$VK,{136:54,137:55,129:103,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VR,$VK,{136:54,137:55,129:104,11:[1,105],61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VR,$VK,{136:54,137:55,129:106,11:[1,107],61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VR,$VK,{136:54,137:55,129:108,11:[1,109],61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VR,$VK,{136:54,137:55,129:110,11:[1,111],61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VP,$VK,{136:54,137:55,129:112,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VP,$VK,{136:54,137:55,129:113,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VP,$VK,{136:54,137:55,129:114,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VS,[2,156]),o($VS,[2,157]),o($VT,$V6,{14:115,15:$V7}),{11:[1,116]},{57:[1,117]},{11:[1,120],53:[1,118],153:[1,119]},o($VQ,[2,172]),o([6,11,21,28,40,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$V6,{14:121,15:$V7}),{7:67,8:$Vc,11:[1,123],12:122,13:68,179:$VC},{22:[1,124]},o([11,22,51,53,57],$V6,{14:125,15:$V7}),o($VU,[2,6]),o($VU,[2,7]),o([8,11,15,22,42,48,51,53,57,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,111,124,131,132,133,134,140,141,153,157,165,168,170,173,175,178,179,182,185,190,191,192],[2,212]),{22:[1,126]},o($VV,[2,25]),o($VV,[2,26]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,31]),o($VW,[2,32]),o($VW,[2,33]),o($VW,[2,34]),o($VW,[2,35]),o($VW,[2,36]),o($VW,[2,130]),o($VO,$V6,{14:127,15:$V7}),o($VX,$V6,{14:128,15:$V7}),{10:135,11:$VY,26:129,46:130,49:131,50:132,51:$VZ,53:$V_,55:136,57:$V$},o($V01,$V11,{65:139,67:141,11:[1,140],61:$V21}),{39:143,40:$VF},{10:145,11:$VY,90:144},{10:146,11:$VY},{10:147,11:$VY},{39:148,40:$VF},{39:149,40:$VF},{53:$V31,57:$V41,116:150,117:151,119:152},{10:155,11:$VY},o($VO,$V6,{14:156,15:$V7}),o($VO,$V6,{14:157,15:$V7}),o($VO,$V6,{14:158,15:$V7}),o($VO,$V6,{14:159,15:$V7}),o($VQ,[2,137]),o($VQ,[2,138]),{11:[1,160]},o($VS,[2,155]),o($VQ,[2,140]),o($VQ,[2,141]),o($VP,$VK,{136:54,137:55,129:161,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VQ,[2,143]),o($VP,$VK,{136:54,137:55,129:162,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VQ,[2,145]),o($VP,$VK,{136:54,137:55,129:163,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VQ,[2,147]),o($VP,$VK,{136:54,137:55,129:164,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VQ,[2,149]),o($VQ,[2,150]),o($VQ,[2,151]),{11:$Ve,128:167,138:46,139:$Vw,140:$Vx,142:165,144:166},o($VQ,[2,168]),o([124,157,158,159,161,190,191],$V6,{14:168,15:$V7}),{57:[1,169]},o($V51,$V6,{14:170,15:$V7}),o($VQ,[2,173]),o($V8,$V9,{27:14,19:171,28:$Va}),{14:172,15:$V7,22:$V6},o($Vb,$V6,{14:173,15:$V7}),o($V0,$V6,{14:174,15:$V7}),{10:135,11:$VY,22:[2,20],25:175,26:176,46:130,49:131,50:132,51:$VZ,53:$V_,55:136,57:$V$},o([6,11,21,23,28,40,42,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$V6,{14:177,15:$V7}),o($V61,$VK,{125:43,128:44,129:45,138:46,136:54,137:55,123:178,11:$Ve,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($V71,[2,185],{41:179,69:180,162:181,166:183,167:184,11:$V81,140:$V91,165:$Va1}),{14:187,15:$V7,40:$V6},o($Vb1,[2,46],{47:188,48:[1,189]}),o($Vc1,[2,47]),o($Vc1,[2,48]),{11:$V6,14:190,15:$V7},{11:$V6,14:191,15:$V7},o($Vd1,$V6,{14:192,15:$V7}),o($Vc1,[2,56],{56:193,54:[1,194]}),o([11,15,22,40,48,54,60,61,63,143],[2,5]),{11:$V6,14:195,15:$V7},{40:[1,196]},o($V01,$V11,{67:197,61:$V21}),{14:198,15:$V7,40:$V6},{11:[1,199]},o($VW,[2,89]),{40:[1,200]},o([11,40],$V6,{14:201,15:$V7}),{14:202,15:$V7,40:$V6},{14:203,15:$V7,40:$V6},o($VW,[2,116]),o($VW,[2,117]),{40:[1,204]},o($Ve1,[2,121],{54:[1,206],118:[1,205]}),{11:$V81,53:$V31,57:$V41,69:209,116:208,117:151,119:210,120:207,140:$V91,162:181,165:$Va1,166:183,167:184},o($Vf1,$V6,{14:211,15:$V7}),{14:212,15:$V7,57:$V6},{14:213,15:$V7,40:$V6},o($V61,$VK,{128:44,129:45,138:46,136:54,137:55,125:214,11:$Ve,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($V61,$VK,{128:44,129:45,138:46,136:54,137:55,125:215,11:$Ve,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($V61,$VK,{128:44,129:45,138:46,136:54,137:55,125:216,11:$Ve,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VQ,[2,136]),o($VS,[2,153]),o($VQ,[2,142]),o($VQ,[2,144]),o($VQ,[2,146]),o($VQ,[2,148]),{143:[1,217]},{127:[1,224],140:[1,220],143:[2,159],145:218,146:[1,219],147:[1,221],148:[1,222],149:[1,223]},o($Vg1,$V6,{14:225,15:$V7}),{124:[1,232],152:226,155:227,156:234,157:[1,233],158:[1,228],159:[1,229],160:230,161:[1,231],190:$Vh1,191:$Vi1},o([11,48,60,61,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$V6,{14:237,15:$V7}),{7:242,8:$Vc,11:$Vj1,13:240,57:$Vk1,62:238,108:249,111:$Vl1,124:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,141:$Vr1,153:$Vs1,156:234,157:$Vt1,160:259,171:239,174:241,175:$Vu1,176:246,177:247,178:$Vv1,179:$VC,182:$Vw1,183:252,184:253,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1},o($V8,[2,21]),{22:[2,23]},{7:67,8:$Vc,12:265,13:68,179:$VC},o($V3,$V4,{18:266,23:$V5}),{22:[2,18]},{14:267,15:$V7,22:$V6},o([6,11,15,21,23,28,40,42,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],[2,14]),o($VJ,[2,131],{128:44,129:45,138:46,136:54,137:55,125:98,11:$Ve,15:$VK,61:$Vg,124:$VL,126:$VM,127:$VN,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),{22:[1,269],42:[1,268]},o($V71,[2,184]),o($Vz1,[2,194],{163:270,168:[1,271]}),o($VA1,$V6,{14:272,15:$V7}),o([22,42,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,140,165,168,170],[2,189],{156:234,171:239,13:240,174:241,7:242,176:246,177:247,108:249,183:252,184:253,160:259,62:273,8:$Vc,11:$Vj1,57:$Vk1,111:$Vl1,124:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,141:$Vr1,153:$Vs1,157:$Vt1,175:$Vu1,178:$Vv1,179:$VC,182:$Vw1,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1}),{14:274,15:$V7,61:$V6},{11:[1,275]},o($VB1,[2,192]),{40:[1,276]},o($Vb1,[2,44]),o($VH,$V6,{14:277,15:$V7}),{10:278,11:$VY},{10:279,11:$VY},o($Vc1,$VC1,{52:280,54:$VD1}),o($Vc1,[2,54]),{14:282,15:$V7,57:$V6},{10:283,11:$VY},o($VE1,$V6,{14:284,15:$V7}),{14:285,15:$V7,40:$V6},{40:[2,64]},o($V01,[2,65]),o($VF1,$V6,{14:286,15:$V7}),{10:145,11:$VY,40:[2,93],90:288,92:287},{40:[1,289]},{40:[1,290]},o([11,21,40,42,43,48,61,64,88,89,101,103,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154],$V6,{14:291,15:$V7}),o($VI,$V6,{14:292,15:$V7}),o($VI,$V6,{14:293,15:$V7}),o($VG1,$VH1),{60:[1,294]},{60:[1,295]},{11:$V81,53:$V31,57:$V41,69:209,116:208,117:151,119:210,120:296,140:$V91,162:181,165:$Va1,166:183,167:184},{11:$V81,53:$V31,57:$V41,69:297,116:298,117:151,119:152,140:$V91,162:181,165:$Va1,166:183,167:184},{57:[1,299]},{39:300,40:$VF},o($VO,$V6,{14:301,15:$V7}),o($VO,$V6,{14:302,15:$V7}),o($VO,$V6,{14:303,15:$V7}),o($VQ,[2,158]),o([8,11],$V6,{14:304,15:$V7}),o($VI1,[2,162]),{146:[1,305]},o($VI1,[2,164]),{146:[1,306]},{146:[1,307]},{146:[1,308]},o($Vg1,[2,161]),{60:[1,309]},{60:[2,176],124:[1,310],157:[1,311]},{14:312,15:$V7,60:$V6},{14:313,15:$V7,60:$V6},{14:314,15:$V7,60:$V6,161:[1,315]},o($VJ1,$V6,{14:316,15:$V7}),{156:317,190:$Vh1,191:$Vi1},{156:318,190:$Vh1,191:$Vi1},o($VK1,[2,244]),o($VK1,[2,245]),o($VK1,[2,246]),o([15,48,60,124,126,127],$VK,{123:42,125:43,128:44,129:45,138:46,136:54,137:55,122:319,11:$Ve,61:$Vg,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),{60:[1,320]},o($VL1,$V6,{14:321,15:$V7}),o($VM1,[2,203]),o($VM1,[2,204]),o($VM1,[2,205]),o($VM1,[2,206]),o($VM1,[2,207]),o($VM1,[2,208]),o($VM1,[2,209]),o($VM1,[2,210]),o($VM1,[2,211]),o([8,15,22,42,48,57,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,111,124,131,132,133,134,140,141,153,157,165,168,170,173,175,178,179,182,185,190,191,192],[2,222],{180:322,11:[1,323],112:[1,324]}),o($VN1,$V6,{14:325,15:$V7}),{57:[1,326]},o($VM1,[2,216]),o($VM1,[2,217]),o($VM1,[2,235]),o($VM1,[2,236]),o($VM1,[2,237]),o($VM1,[2,238]),{11:$V6,14:327,15:$V7},o($VO1,[2,247]),{156:317,190:$Vh1,191:$Vi1,192:[1,328]},{156:318,190:$Vh1,191:$Vi1,192:[1,329]},o($VO1,[2,250]),{57:[1,330]},o([8,11,57,60,111,124,131,132,133,134,141,153,157,175,178,179,182,185,190,191,192],$V6,{14:331,15:$V7}),{14:332,15:$V7,22:$V6},o($V3,[2,16]),{22:[2,19]},o([6,11,15,21,22,40,42,43,48,61,64,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,96,97,98,99,100,101,103,110,111,113,114,115,121,124,126,127,130,131,132,133,134,135,139,140,141,150,151,154,157,165,190,191,192],[2,37]),o($VX,$V6,{14:333,15:$V7}),o($VP1,[2,197],{164:334,63:[1,336],170:[1,335]}),{14:337,15:$V7,169:$V6},o($VA1,[2,187]),o($VA1,[2,188]),{61:[1,338]},o($VB1,[2,191]),o($VQ1,$V6,{14:339,15:$V7}),{10:135,11:$VY,26:340,46:130,49:131,50:132,51:$VZ,53:$V_,55:136,57:$V$},o($Vd1,$V6,{14:341,15:$V7}),o($Vd1,$V6,{14:342,15:$V7}),o($Vc1,[2,51]),{14:343,15:$V7,57:$V6},{50:344,55:136,57:$V$},o([60,61,63],$V6,{14:345,15:$V7}),{11:$V81,22:$VR1,42:$VS1,66:346,68:347,69:348,70:349,71:351,72:$VT1,73:$VU1,74:$VV1,75:$VW1,76:$VX1,77:$VY1,78:$VZ1,79:$V_1,80:$V$1,81:$V02,82:$V12,83:$V22,84:$V32,85:$V42,86:$V52,87:$V62,140:$V91,162:181,165:$Va1,166:183,167:184},{40:[2,63]},{42:$V72,91:368,93:369,94:370,95:$V82,96:$V92,97:$Va2,98:$Vb2,99:$Vc2,100:$Vd2},{40:[2,91]},{40:[2,92]},o($Ve2,$V6,{14:377,15:$V7}),o($Ve2,$V6,{14:378,15:$V7}),o($Vf2,$Vd,{29:20,17:21,30:22,31:23,32:24,33:25,34:26,35:27,36:28,37:29,38:30,122:31,123:42,125:43,128:44,129:45,138:46,136:54,137:55,20:379,11:$Ve,21:$V1,43:$Vf,61:$Vg,64:$Vh,88:$Vi,89:$Vj,101:$Vk,103:$Vl,113:$Vm,114:$Vn,115:$Vo,121:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),{53:$V31,57:$V41,116:380,117:151,119:152},{53:$V31,57:$V41,116:381,117:151,119:152},o($VG1,$V6,{14:382,15:$V7}),o($VG1,$V6,{14:383,15:$V7}),o([54,118],$VH1,{60:[1,384]}),{60:[1,385]},{60:[1,386]},o($Vf1,$V6,{14:387,15:$V7}),o($VW,[2,129]),o($VQ,[2,133]),o($VQ,[2,134]),o($VQ,[2,135]),{7:389,8:$Vc,9:388,10:390,11:$VY},o($VI1,[2,163]),o($VI1,[2,165]),o($VI1,[2,166]),o($VI1,[2,167]),o($VQ,[2,169]),o($Vg2,$V6,{14:391,15:$V7}),o($Vg2,$V6,{14:392,15:$V7}),{60:[2,177]},{60:[2,178]},{60:[2,179]},o($VJ1,$V6,{14:393,15:$V7}),o($VJ1,[2,181]),o($VK1,[2,242]),o($VK1,[2,243]),{48:$VG,60:[1,394]},o($VQ,[2,171]),o($VM1,[2,202],{172:395}),o($VM1,[2,213]),o($VM1,[2,220]),o($VM1,[2,221]),{57:$Vk1,108:249,124:$Vm1,153:$Vs1,156:234,157:$Vt1,160:259,174:398,181:396,182:$Vw1,183:252,184:253,185:$Vx1,188:397,190:$Vh1,191:$Vi1,192:$Vy1},o($VN1,$V6,{14:399,15:$V7}),{11:$Vh2,189:400},o($VO1,[2,248]),o($VO1,[2,249]),o($VT,$V6,{14:402,15:$V7}),{7:242,8:$Vc,11:$Vj1,13:240,57:$Vk1,60:[1,404],62:403,108:249,111:$Vl1,124:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,141:$Vr1,153:$Vs1,156:234,157:$Vt1,160:259,171:239,174:241,175:$Vu1,176:246,177:247,178:$Vv1,179:$VC,182:$Vw1,183:252,184:253,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1},{22:[2,24]},o($V71,[2,183],{162:181,166:183,167:184,69:405,11:$V81,140:$V91,165:$Va1}),o($VP1,[2,186]),o($VP1,$V6,{14:406,15:$V7}),o($VP1,$V6,{14:407,15:$V7}),{169:[1,408]},o($Vi2,$V6,{14:409,15:$V7}),o($Vf2,$Vj2,{122:31,123:42,125:43,128:44,129:45,138:46,136:54,137:55,44:410,45:411,31:412,32:413,30:414,11:$Ve,43:$Vf,61:$Vg,64:$Vh,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($Vb1,[2,45]),o($Vc1,$VC1,{52:415,54:$VD1}),o($Vc1,$VC1,{52:416,54:$VD1}),{50:417,55:136,57:$V$},o($Vc1,[2,55]),o($Vk2,[2,59],{58:418,61:[1,419]}),{42:[1,420]},{11:$V81,22:$VR1,42:$VS1,66:421,68:347,69:348,70:349,71:351,72:$VT1,73:$VU1,74:$VV1,75:$VW1,76:$VX1,77:$VY1,78:$VZ1,79:$V_1,80:$V$1,81:$V02,82:$V12,83:$V22,84:$V32,85:$V42,86:$V52,87:$V62,140:$V91,162:181,165:$Va1,166:183,167:184},o($VE1,[2,69]),o($VE1,[2,70]),o($VE1,$V6,{14:422,15:$V7}),{14:423,15:$V7,40:$V6},o($V01,[2,73]),o($V01,[2,74]),o($V01,[2,75]),o($V01,[2,76]),o($V01,[2,77]),o($V01,[2,78]),o($V01,[2,79]),o($V01,[2,80]),o($V01,[2,81]),o($V01,[2,82]),o($V01,[2,83]),o($V01,[2,84]),o($V01,[2,85]),o($V01,[2,86]),o($V01,[2,87]),o($V01,[2,88]),{42:[1,424]},{42:$V72,91:425,93:369,94:370,95:$V82,96:$V92,97:$Va2,98:$Vb2,99:$Vc2,100:$Vd2},{14:426,15:$V7,40:$V6},o($V01,[2,97]),o($V01,[2,98]),o($V01,[2,99]),o($V01,[2,100]),o($V01,[2,101]),o($V01,[2,102]),{42:$Vl2,102:427,104:428,105:429,106:430,108:431,110:$Vm2,111:$Vn2,124:$Vm1,156:234,157:$Vt1,160:259,190:$Vh1,191:$Vi1,192:$Vy1},{42:$Vl2,102:434,104:428,105:429,106:430,108:431,110:$Vm2,111:$Vn2,124:$Vm1,156:234,157:$Vt1,160:259,190:$Vh1,191:$Vi1,192:$Vy1},{42:[1,435]},o($Ve1,[2,119]),o($Ve1,[2,120]),o($VG1,[2,125]),o($VG1,[2,126]),o($VG1,$V6,{14:436,15:$V7}),o($VG1,$V6,{14:437,15:$V7}),o($VG1,$V6,{14:438,15:$V7}),o($Vf1,[2,128]),{14:439,15:$V7,143:$V6},o($Vo2,[2,3]),o($Vo2,[2,4]),{156:440,190:$Vh1,191:$Vi1},{156:441,190:$Vh1,191:$Vi1},o($VJ1,[2,180]),o($VQ,[2,170]),o([15,22,42,60,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,140,165,168,170],[2,198],{156:234,13:240,174:241,7:242,176:246,177:247,108:249,183:252,184:253,160:259,171:444,8:$Vc,11:$Vj1,48:[1,442],57:$Vk1,111:$Vl1,124:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,141:$Vr1,153:$Vs1,157:$Vt1,173:[1,443],175:$Vu1,178:$Vv1,179:$VC,182:$Vw1,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1}),{60:[1,445],124:$Vp2,157:$Vq2},o($Vr2,$V6,{14:448,15:$V7}),o($Vs2,[2,234]),{57:$Vk1,108:249,124:$Vm1,153:$Vs1,156:234,157:$Vt1,160:259,174:398,181:449,182:$Vw1,183:252,184:253,185:$Vx1,188:397,190:$Vh1,191:$Vi1,192:$Vy1},{143:[1,450]},o([11,143],$V6,{14:451,15:$V7}),{11:$Ve,128:452,138:46,139:$Vw,140:$Vx},{60:[1,453]},o($VM1,[2,219]),o($V71,[2,182]),o($VP1,[2,195]),o($VP1,[2,196]),o($Vz1,$V6,{14:454,15:$V7}),o($Vi2,[2,190]),{42:[1,455]},o($Vf2,$Vj2,{122:31,123:42,125:43,128:44,129:45,138:46,136:54,137:55,45:411,31:412,32:413,30:414,44:456,11:$Ve,43:$Vf,61:$Vg,64:$Vh,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,139:$Vw,140:$Vx,141:$Vy,150:$Vz,151:$VA,154:$VB}),o($VQ1,$V6,{14:457,15:$V7}),o($VQ1,$V6,{14:458,15:$V7}),o($VQ1,$V6,{14:459,15:$V7}),o($Vc1,[2,49]),o($Vc1,[2,50]),o($Vc1,[2,52]),o([60,63],$V6,{14:460,15:$V7}),o($V51,$V6,{14:461,15:$V7}),o($VW,[2,62]),{42:[2,67]},o($VE1,[2,71]),{39:462,40:$VF},o($VW,[2,90]),{42:[2,94]},{39:463,40:$VF},{42:[1,464]},{42:$Vl2,102:465,104:428,105:429,106:430,108:431,110:$Vm2,111:$Vn2,124:$Vm1,156:234,157:$Vt1,160:259,190:$Vh1,191:$Vi1,192:$Vy1},{39:466,40:$VF},o([40,48],$V6,{14:467,15:$V7}),o($Vt2,[2,115],{109:468,112:[1,469]}),o($Vt2,[2,112]),o($Vt2,[2,113]),{42:[1,470]},o($VW,[2,118]),o($VG1,[2,127]),o($VG1,[2,123]),o($VG1,[2,124]),{143:[2,160]},{14:471,15:$V7,60:$V6},{14:472,15:$V7,60:$V6},o($V51,$V6,{14:473,15:$V7}),o($V51,$V6,{14:474,15:$V7}),o($VL1,$V6,{14:475,15:$V7}),o($VM1,[2,214]),o($VN1,$V6,{14:476,15:$V7}),o($VN1,$V6,{14:477,15:$V7}),o($VJ1,[2,231],{140:$Vu2,173:$Vv2}),{60:[1,480],124:$Vp2,157:$Vq2},o($VM1,[2,239]),{11:$Vh2,143:[2,241],189:481},o([11,48,60],$V6,{14:482,15:$V7}),o($VM1,[2,218]),o($Vz1,[2,193]),o($VW,[2,38]),{42:[2,39]},o($Vw2,[2,41]),o($Vw2,[2,42]),o($Vw2,[2,43]),{59:483,60:[2,61],63:[1,484]},{7:242,8:$Vc,11:$Vj1,13:240,57:$Vk1,62:485,108:249,111:$Vl1,124:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,141:$Vr1,153:$Vs1,156:234,157:$Vt1,160:259,171:239,174:241,175:$Vu1,176:246,177:247,178:$Vv1,179:$VC,182:$Vw1,183:252,184:253,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1},o($VE1,$V6,{14:486,15:$V7}),o($VF1,$V6,{14:487,15:$V7}),o($VW,[2,103]),{42:[2,105]},o($Ve2,$V6,{14:488,15:$V7}),{40:[2,110],48:[1,490],107:489},o($Vt2,[2,111]),o($Vt2,[2,114]),o($VW,[2,104]),{60:[2,174]},{60:[2,175]},{7:242,8:$Vc,11:$Vj1,13:240,57:$Vk1,108:249,111:$Vl1,124:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,141:$Vr1,153:$Vs1,156:234,157:$Vt1,160:259,171:491,174:241,175:$Vu1,176:246,177:247,178:$Vv1,179:$VC,182:$Vw1,183:252,184:253,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1},{7:242,8:$Vc,11:$Vj1,13:240,57:$Vk1,108:249,111:$Vl1,124:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,141:$Vr1,153:$Vs1,156:234,157:$Vt1,160:259,171:492,174:241,175:$Vu1,176:246,177:247,178:$Vv1,179:$VC,182:$Vw1,183:252,184:253,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1},o($VM1,[2,201]),{57:$Vk1,108:249,124:$Vm1,153:$Vs1,156:234,157:$Vt1,160:259,174:398,182:$Vw1,183:252,184:253,185:$Vx1,188:493,190:$Vh1,191:$Vi1,192:$Vy1},{57:$Vk1,108:249,124:$Vm1,153:$Vs1,156:234,157:$Vt1,160:259,174:398,182:$Vw1,183:252,184:253,185:$Vx1,188:494,190:$Vh1,191:$Vi1,192:$Vy1},o($VN1,$V6,{14:495,15:$V7}),o($VN1,$V6,{14:496,15:$V7}),o($VM1,[2,215]),{143:[2,240]},{11:[1,498],48:[1,499],60:[2,226],186:497},{60:[1,500]},{14:501,15:$V7,60:$V6},o($Vk2,[2,58]),o($VE1,[2,72]),o($VF1,[2,96]),o($Ve2,[2,107]),{40:[2,108]},o([110,111,124,157,190,191,192],$V6,{14:502,15:$V7}),o($VL1,$V6,{14:503,15:$V7}),o($VL1,$V6,{14:504,15:$V7}),o($Vr2,$V6,{14:505,15:$V7}),o($Vr2,$V6,{14:506,15:$V7}),{57:$Vk1,108:249,124:$Vm1,153:$Vs1,156:234,157:$Vt1,160:259,174:507,182:$Vw1,183:252,184:253,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1},{57:$Vk1,108:249,124:$Vm1,153:$Vs1,156:234,157:$Vt1,160:259,174:508,182:$Vw1,183:252,184:253,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1},{60:[1,509]},o([48,60],$V6,{14:510,15:$V7}),o($VN1,$V6,{14:511,15:$V7}),o($Vd1,$V6,{14:512,15:$V7}),{60:[2,60]},{105:513,106:430,108:431,110:$Vm2,111:$Vn2,124:$Vm1,156:234,157:$Vt1,160:259,190:$Vh1,191:$Vi1,192:$Vy1},o($VM1,[2,199]),o($VM1,[2,200]),o($VJ1,[2,229],{140:$Vu2,173:$Vv2}),o($VJ1,[2,230],{140:$Vu2,173:$Vv2}),o($Vs2,[2,232]),o($Vs2,[2,233]),o($VM1,[2,223]),o($Vx2,[2,228],{187:514,48:[1,515]}),{57:$Vk1,108:249,124:$Vm1,153:$Vs1,156:234,157:$Vt1,160:259,174:516,182:$Vw1,183:252,184:253,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1},o([15,22,40,48,54],[2,57]),{40:[2,109]},{14:517,15:$V7,60:$V6},o($VN1,$V6,{14:518,15:$V7}),{14:519,15:$V7,60:$V6},{60:[2,224]},{57:$Vk1,108:249,124:$Vm1,153:$Vs1,156:234,157:$Vt1,160:259,174:520,182:$Vw1,183:252,184:253,185:$Vx1,190:$Vh1,191:$Vi1,192:$Vy1},{60:[2,225]},o($Vx2,[2,227])],
defaultActions: {8:[2,1],19:[2,13],172:[2,23],175:[2,18],198:[2,64],267:[2,19],285:[2,63],287:[2,91],288:[2,92],312:[2,177],313:[2,178],314:[2,179],332:[2,24],421:[2,67],425:[2,94],439:[2,160],456:[2,39],465:[2,105],471:[2,174],472:[2,175],481:[2,240],489:[2,108],501:[2,60],513:[2,109],517:[2,224],519:[2,225]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 134
break;
case 1:return 132
break;
case 2:return 133
break;
case 3:return 131
break;
case 4:return 191
break;
case 5:return 192
break;
case 6:return 192
break;
case 7:return 190
break;
case 8:return 15
break;
case 9:return 48
break;
case 10:return 22
break;
case 11:return 48
break;
case 12:return 40
break;
case 13:return 42
break;
case 14:return 141
break;
case 15:return 143
break;
case 16:return 57
break;
case 17:return 60
break;
case 18:return 112
break;
case 19:return 140
break;
case 20:return 147
break;
case 21:return 139
break;
case 22:return 173
break;
case 23:return 140
break;
case 24:return 146
break;
case 25:return 11  // For cursor: n-resize
break;
case 26:return 11  // For cursor: not-allowed
break;
case 27:return 161
break;
case 28:return 21
break;
case 29:return 121
break;
case 30:return 23
break;
case 31:return 28
break;
case 32:return 43
break;
case 33:return 88
break;
case 34:return 89
break;
case 35:return 64
break;
case 36:return 101
break;
case 37:return 103
break;
case 38:return 113
break;
case 39:return 114
break;
case 40:return 115
break;
case 41:return 72
break;
case 42:return 73
break;
case 43:return 74
break;
case 44:return 75
break;
case 45:return 76
break;
case 46:return 77
break;
case 47:return 78
break;
case 48:return 79
break;
case 49:return 80
break;
case 50:return 81
break;
case 51:return 82
break;
case 52:return 83
break;
case 53:return 84
break;
case 54:return 85
break;
case 55:return 86
break;
case 56:return 87
break;
case 57:return 95
break;
case 58:return 96
break;
case 59:return 97
break;
case 60:return 98
break;
case 61:return 99
break;
case 62:return 100
break;
case 63:return 175
break;
case 64:return 175
break;
case 65:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 8;
break;
case 66:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 8;
break;
case 67:return 51
break;
case 68:return 53
break;
case 69:return 54
break;
case 70:return 118
break;
case 71:return 158
break;
case 72:return 159
break;
case 73:return 168
break;
case 74:return 169
break;
case 75:return 178
break;
case 76:return 165
break;
case 77:return 165
break;
case 78:return 165
break;
case 79:return 165
break;
case 80:return 165
break;
case 81:return 179
break;
case 82:return 182
break;
case 83:return 185
break;
case 84:return 130  // for ie :(
break;
case 85:return 130
break;
case 86:return 135
break;
case 87:return 153
break;
case 88:return 110
break;
case 89:return 111
break;
case 90:return 11
break;
case 91:return 149
break;
case 92:return 148
break;
case 93:return 157
break;
case 94:return 124
break;
case 95:return 126
break;
case 96:return 127
break;
case 97:return 151
break;
case 98:return 154
break;
case 99:return 154
break;
case 100:return 150
break;
case 101:return 61
break;
case 102:return 63
break;
case 103:return 170
break;
case 104:return 6
break;
}
},
rules: [/^(?:#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9]))/,/^(?:#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9]))/,/^(?:#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9]))/,/^(?:#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9]))/,/^(?:(([1-9][0-9]*|0))e(\+|-)?(([1-9][0-9]*|0)))/,/^(?:(([1-9][0-9]*|0))?\.[0-9]+)/,/^(?:(([1-9][0-9]*|0))\.[0-9]*)/,/^(?:(([1-9][0-9]*|0)))/,/^(?:(([ \n\r\t\f])|(\/\*(.|\n|\r)*?\*\/))+)/,/^(?:,)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:%)/,/^(?:\*)/,/^(?:\|=)/,/^(?:\|)/,/^(?:\/)/,/^(?:\*)/,/^(?:=)/,/^(?:n-resize\b)/,/^(?:not-allowed\b)/,/^(?:n\b)/,/^(?:@charset\b)/,/^(?:@counter-style\b)/,/^(?:@import\b)/,/^(?:@namespace\b)/,/^(?:@media\b)/,/^(?:@font-face\b)/,/^(?:@font-feature-values\b)/,/^(?:@page\b)/,/^(?:@keyframes\b)/,/^(?:@-[a-zA-Z]+-keyframes\b)/,/^(?:@viewport\b)/,/^(?:@-[a-zA-Z]+-viewport\b)/,/^(?:@supports\b)/,/^(?:@top-left-corner\b)/,/^(?:@top-left\b)/,/^(?:@top-center\b)/,/^(?:@top-right\b)/,/^(?:@top-right-corner\b)/,/^(?:@bottom-left-corner\b)/,/^(?:@bottom-left\b)/,/^(?:@bottom-center\b)/,/^(?:@bottom-right\b)/,/^(?:@bottom-right-corner\b)/,/^(?:@left-top\b)/,/^(?:@left-middle\b)/,/^(?:@left-bottom\b)/,/^(?:@right-top\b)/,/^(?:@right-middle\b)/,/^(?:@right-bottom\b)/,/^(?:@swash\b)/,/^(?:@annotation\b)/,/^(?:@ornaments\b)/,/^(?:@stylistic\b)/,/^(?:@styleset\b)/,/^(?:@character-variant\b)/,/^(?:U\+([a-fA-F0-9])+-([a-fA-F0-9])+)/,/^(?:U\+([a-fA-F0-9])+\?*)/,/^(?:"(?:\\(?:.|([ \n\r\t\f]))|[^"\\])*")/,/^(?:'(?:\\(?:.|([ \n\r\t\f]))|[^'\\])*')/,/^(?:only\b)/,/^(?:not\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:odd\b)/,/^(?:even\b)/,/^(?:!)/,/^(?:important\b)/,/^(?:expression\(.*?\))/,/^(?:-ms-filter([ \n\r\t\f])*:([ \n\r\t\f])*progid:?(([a-zA-Z0-9\.:])+\(([a-zA-Z0-9=#, \n\r\t'"])*\)([ \n\r\t\f])*)+)/,/^(?:-ms-filter([ \n\r\t\f])*:([ \n\r\t\f])*alpha\(([a-zA-Z0-9=#, \n\r\t'"])*\)([ \n\r\t\f])*(([a-zA-Z0-9\.:])+\(([a-zA-Z0-9=#, \n\r\t'"])*\)([ \n\r\t\f])*)*)/,/^(?:filter([ \n\r\t\f])*:([ \n\r\t\f])*progid:(([a-zA-Z0-9\.:])+\(([a-zA-Z0-9=#, \n\r\t'"])*\)([ \n\r\t\f])*)+)/,/^(?:filter([ \n\r\t\f])*:([ \n\r\t\f])*progid:?DXImageTransform\.(([a-zA-Z0-9\.:])+\(([a-zA-Z0-9=#, \n\r\t'"])*\)([ \n\r\t\f])*)+)/,/^(?:filter([ \n\r\t\f])*:([ \n\r\t\f])*alpha\(([a-zA-Z0-9=#, \n\r\t'"])*\)([ \n\r\t\f])*(([a-zA-Z0-9\.:])+\(([a-zA-Z0-9=#, \n\r\t'"])*\)([ \n\r\t\f])*)*)/,/^(?:url\(("(?:\\(?:.|([ \n\r\t\f]))|[^"\\])*"|'(?:\\(?:.|([ \n\r\t\f]))|[^'\\])*'|[^)]*)\))/,/^(?:(((-[a-zA-Z]+-)?))calc\b)/,/^(?:attr\b)/,/^(?:#(([a-zA-Z_]|[^\x00-\x7F]|-([a-zA-Z_\-]|[^\x00-\x7F])|-?\\([\da-fA-F]{1,6}\s|[^\n\da-fA-F]))([\w_\-]|[^\x00-\x7F]|\\([\da-fA-F]+\s|[^\n\da-fA-F]))*)#(([a-zA-Z_]|[^\x00-\x7F]|-([a-zA-Z_\-]|[^\x00-\x7F])|-?\\([\da-fA-F]{1,6}\s|[^\n\da-fA-F]))([\w_\-]|[^\x00-\x7F]|\\([\da-fA-F]+\s|[^\n\da-fA-F]))*))/,/^(?:#(([a-zA-Z_]|[^\x00-\x7F]|-([a-zA-Z_\-]|[^\x00-\x7F])|-?\\([\da-fA-F]{1,6}\s|[^\n\da-fA-F]))([\w_\-]|[^\x00-\x7F]|\\([\da-fA-F]+\s|[^\n\da-fA-F]))*))/,/^(?:\.(([a-zA-Z_]|[^\x00-\x7F]|-([a-zA-Z_\-]|[^\x00-\x7F])|-?\\([\da-fA-F]{1,6}\s|[^\n\da-fA-F]))([\w_\-]|[^\x00-\x7F]|\\([\da-fA-F]+\s|[^\n\da-fA-F]))*))/,/^(?:(([a-zA-Z_]|[^\x00-\x7F]|-([a-zA-Z_\-]|[^\x00-\x7F])|-?\\([\da-fA-F]{1,6}\s|[^\n\da-fA-F]))([\w_\-]|[^\x00-\x7F]|\\([\da-fA-F]+\s|[^\n\da-fA-F]))*)\()/,/^(?:from\b)/,/^(?:to\b)/,/^(?:(([a-zA-Z_]|[^\x00-\x7F]|-([a-zA-Z_\-]|[^\x00-\x7F])|-?\\([\da-fA-F]{1,6}\s|[^\n\da-fA-F]))([\w_\-]|[^\x00-\x7F]|\\([\da-fA-F]+\s|[^\n\da-fA-F]))*))/,/^(?:\$)/,/^(?:\^)/,/^(?:-)/,/^(?:\+)/,/^(?:>)/,/^(?:~)/,/^(?::nth-(last-)?(child|of-type))/,/^(?::only-child\b)/,/^(?::only-of-type\b)/,/^(?:::)/,/^(?::)/,/^(?:\\0)/,/^(?:\\9\b)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}